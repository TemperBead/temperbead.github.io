"use strict";(self.webpackChunk_dreamcatcher_tech_dreamcatcher_website=self.webpackChunk_dreamcatcher_tech_dreamcatcher_website||[]).push([[1270],{34886:function(e){e.exports=JSON.parse('{"pluginId":"tech","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tech":[{"type":"category","label":"Whitepapers","items":[{"type":"link","label":"Dreamcatcher","href":"/tech/","docId":"wp_dreamcatcher"},{"type":"link","label":"DOS","href":"/tech/wp_dos","docId":"wp_dos"},{"type":"link","label":"Interblock","href":"/tech/wp_interblock","docId":"wp_interblock"},{"type":"link","label":"Inversion (NVN)","href":"/tech/wp_inversion","docId":"wp_inversion"}],"collapsed":false,"collapsible":true}]},"docs":{"Apps/Ideator":{"id":"Apps/Ideator","title":"Ideator","description":""},"Apps/Provenance Accounting/Provenance Accounting":{"id":"Apps/Provenance Accounting/Provenance Accounting","title":"Provenance Accounting","description":"Fundamentally we believe the future of accounting and of all supply chain management is the tracking of individual items in an object like data structure, where that datastructure can be easily moved between different participants in a supply chain, and which allow the recovery of all historical data by any recipient of the data object. One blockchain per object appears to satisfy this requirement nicely."},"Architecture_Dictionary/Apps/EvidenceAlgo":{"id":"Architecture_Dictionary/Apps/EvidenceAlgo","title":"EvidenceAlgo","description":"An Algo that returns a probability (0 to 1) that the Parameters of a Ghost can be verified as relating to the Asset the Ghost aims to represent."},"Architecture_Dictionary/Apps/Project Apps":{"id":"Architecture_Dictionary/Apps/Project Apps","title":"Project Apps","description":"Applications that are installed within a Project to provide some enhanced functionality. Algos used by a Project are installed and managed this way. UI can be supplied with each app and rendered in an iFrame for isolation, within the main Project UI."},"Architecture_Dictionary/Attribution Algos/benchmark":{"id":"Architecture_Dictionary/Attribution Algos/benchmark","title":"benchmark","description":"Some code tests are created that return benchmark results. Multiple algos can be combined together, to provide a summary of multiple kinds of testing, such as benchmark and stack ranking."},"Architecture_Dictionary/Attribution Algos/compliesWithLicense":{"id":"Architecture_Dictionary/Attribution Algos/compliesWithLicense","title":"compliesWithLicense","description":"The Output is passed in along with the required license name. If the Project has stated that it licenses it\u2019s Output under the terms of the required license, it returns true."},"Architecture_Dictionary/Attribution Algos/effortAlgo":{"id":"Architecture_Dictionary/Attribution Algos/effortAlgo","title":"effortAlgo","description":"Distribution is based on the effort reported from Issues that are submitted and accepted to the Project."},"Architecture_Dictionary/Attribution Algos/hotPathAlgo":{"id":"Architecture_Dictionary/Attribution Algos/hotPathAlgo","title":"hotPathAlgo","description":"Distribution is based on the number of times a particular module of code is called when running live. The distribution to each module is further divided by the Issues that have contributed to that module, in terms of successful Pull Requests."},"Architecture_Dictionary/Attribution Algos/manualMultiDimensional":{"id":"Architecture_Dictionary/Attribution Algos/manualMultiDimensional","title":"manualMultiDimensional","description":"Humans provide assessments of a series of tests against the Output. The results are tabulated when multiple Outputs are considered."},"Architecture_Dictionary/Attribution Algos/mostLinkedAlgo":{"id":"Architecture_Dictionary/Attribution Algos/mostLinkedAlgo","title":"mostLinkedAlgo","description":"Distribution is based on the number of times a particular code module is included in other modules."},"Architecture_Dictionary/Attribution Algos/Negotiated Algo":{"id":"Architecture_Dictionary/Attribution Algos/Negotiated Algo","title":"Negotiated Algo","description":"Distribution is agreed ahead of time in terms of a set number of Project Shares to entities, either Persons or Projects."},"Architecture_Dictionary/Attribution Algos/PopularityAlgo":{"id":"Architecture_Dictionary/Attribution Algos/PopularityAlgo","title":"PopularityAlgo","description":"A measure of how many Projects are using a particular Output."},"Architecture_Dictionary/Attribution Algos/stackRank":{"id":"Architecture_Dictionary/Attribution Algos/stackRank","title":"stackRank","description":"Compares the Outputs under consideration against some measure, and returns the result in order from best to worst. The comparison measurement may be automated, or may be manual."},"Architecture_Dictionary/Events/Attribution":{"id":"Architecture_Dictionary/Events/Attribution","title":"Attribution","description":"Attribution captures the agreed method of dispersing funds controlled by a Project to its Governors and Contributors. When triggered, Attribution takes as input the entire Project data set (which may also link to external data sets), and the amount to be dispersed, generates an Attribution Table, and moves the appropriate amounts from the Project\u2019s Bank to the Banks of the beneficiaries."},"Architecture_Dictionary/Events/Dispersal":{"id":"Architecture_Dictionary/Events/Dispersal","title":"Dispersal","description":"The event where funds in a Project\u2019s Bank are distributed via the logic contained in its Governance (for voting) and / or Attribution (for algorithmic division) to other Projects. Can be triggered by a payment coming in, or any other event that causes any of its algorithms to trigger."},"Architecture_Dictionary/Events/Negotiation":{"id":"Architecture_Dictionary/Events/Negotiation","title":"Negotiation","description":"Negotiations are carried out using Contracts, a sub-type of Annotations."},"Architecture_Dictionary/Events/Observer Event":{"id":"Architecture_Dictionary/Events/Observer Event","title":"Observer Event","description":"Input for the frame a collection of objects to be filtered and assessed by the frame."},"Architecture_Dictionary/Events/Pull Request":{"id":"Architecture_Dictionary/Events/Pull Request","title":"Pull Request","description":"The sole method of affecting change in the Dreamcatcher and the fundamental means of Project to Project communication. Pull Requests can propose:"},"Architecture_Dictionary/Events/Update-Downvote":{"id":"Architecture_Dictionary/Events/Update-Downvote","title":"Update-Downvote","description":"A simple method to show support or disapproval, as a form of Comment. Upvotes/Downvotes can be displayed as a form of currency in the Bank."},"Architecture_Dictionary/Functions/Governance":{"id":"Architecture_Dictionary/Functions/Governance","title":"Governance","description":"Governance handles the voting rights and decision making process around accepting or rejecting Pull Requests that are submitted to it. Every Project must include Governance."},"Architecture_Dictionary/Governance Algos/arbiterAlgo":{"id":"Architecture_Dictionary/Governance Algos/arbiterAlgo","title":"arbiterAlgo","description":"A standard system supplied algo that offers one way in which an Arbiter service can be set up to settle disputes using an external service."},"Architecture_Dictionary/Governance Algos/consumerAlgo":{"id":"Architecture_Dictionary/Governance Algos/consumerAlgo","title":"consumerAlgo","description":"Votes are distributed in proportion to the revenue generated from each consumer of the Output."},"Architecture_Dictionary/Governance Algos/contributorAlgo":{"id":"Architecture_Dictionary/Governance Algos/contributorAlgo","title":"contributorAlgo","description":"Votes are distributed based on the Project Shares issued by the Project at the time of the vote."},"Architecture_Dictionary/Governance Algos/governorAlgo":{"id":"Architecture_Dictionary/Governance Algos/governorAlgo","title":"governorAlgo","description":"The Governor is provided by the whole share of votes assigned to this algorithm. These votes may be assigned further depending on the entities within the Governor (e.g. if there is a Project inside of the Governor structure, then that proportion of the vote will be assigned by that Project\u2019s governance."},"Architecture_Dictionary/Governance Algos/personAlgo":{"id":"Architecture_Dictionary/Governance Algos/personAlgo","title":"personAlgo","description":"Each Person in the Dreamscape may claim one vote on each decision event."},"Architecture_Dictionary/Governance Algos/projectShareAlgo":{"id":"Architecture_Dictionary/Governance Algos/projectShareAlgo","title":"projectShareAlgo","description":"Votes are distributed evenly, one to each entity listed in the input to the algorithm. Each entity can be a Person or a Project. If a Project, that vote may be split further by that Project\u2019s Governance."},"Architecture_Dictionary/Governance Algos/tiebreakerAlgo":{"id":"Architecture_Dictionary/Governance Algos/tiebreakerAlgo","title":"tiebreakerAlgo","description":"If a deadlock occurs and has been in place for a set period of time, the people listed here breaks the tie."},"Architecture_Dictionary/Objects/Annotation":{"id":"Architecture_Dictionary/Objects/Annotation","title":"Annotation","description":"The layer which allows any information to be added to the chainscape about any other object. Used to make comments, contracts, and predictions"},"Architecture_Dictionary/Objects/Arbiter":{"id":"Architecture_Dictionary/Objects/Arbiter","title":"Arbiter","description":"Typeof: Project"},"Architecture_Dictionary/Objects/Attribution Algorithm":{"id":"Architecture_Dictionary/Objects/Attribution Algorithm","title":"Attribution Algorithm","description":"[See ATTRIBUTION ALGO DICTIONARY]"},"Architecture_Dictionary/Objects/Bank":{"id":"Architecture_Dictionary/Objects/Bank","title":"Bank","description":"The record of funds held by a Person or a Project, and details of any external links such as other crypto-wallets or real-world accounts."},"Architecture_Dictionary/Objects/Branch":{"id":"Architecture_Dictionary/Objects/Branch","title":"Branch","description":"The general term for an Object which has been previously Forked from another Object, and which came into existence at that Fork. Used when referring to itself relative to its Origin."},"Architecture_Dictionary/Objects/Contract":{"id":"Architecture_Dictionary/Objects/Contract","title":"Contract","description":"typeof: Annotation"},"Architecture_Dictionary/Objects/Dependency":{"id":"Architecture_Dictionary/Objects/Dependency","title":"Dependency","description":"Dependencies are a child of a Ghost, and provide a list of Weak Links to the Ghosts that this Ghost depends on."},"Architecture_Dictionary/Objects/Evidence":{"id":"Architecture_Dictionary/Objects/Evidence","title":"Evidence","description":"Typeof Frame/Object"},"Architecture_Dictionary/Objects/Ghost":{"id":"Architecture_Dictionary/Objects/Ghost","title":"Ghost","description":"Ghost objects relate to the Proof of Existence (POE) of an Asset that is referred to on the DCM, and it\'s related real-world incarnation."},"Architecture_Dictionary/Objects/Identity":{"id":"Architecture_Dictionary/Objects/Identity","title":"Identity","description":"The Identity Object contains all information necessary to link an Instance Projecta Ghost to the Asset it refers to. Identity Objects contain Parameters/, Evidence/ and Dependencies/. As such, the structure of an Identity Object is identical to that of an Output/."},"Architecture_Dictionary/Objects/Instance Project":{"id":"Architecture_Dictionary/Objects/Instance Project","title":"Instance Project","description":"Typeof: Project"},"Architecture_Dictionary/Objects/Issue":{"id":"Architecture_Dictionary/Objects/Issue","title":"Issue","description":"A record of a piece of work to be done, a proposed change or a problem to be resolved. Issues indicate the Objects to which it refers through Weak Links. Issues are worked on by Contributors."},"Architecture_Dictionary/Objects/Observer":{"id":"Architecture_Dictionary/Objects/Observer","title":"Observer","description":"Typeof: Instance Project"},"Architecture_Dictionary/Objects/Origin":{"id":"Architecture_Dictionary/Objects/Origin","title":"Origin","description":"For Forks, the general term for an Object which has previously been Forked, used when referring to itself relative to its Branch."},"Architecture_Dictionary/Objects/Outputs":{"id":"Architecture_Dictionary/Objects/Outputs","title":"Outputs","description":"Outputs are links to Instance Projects which the Project is working on and therefore changing. Every Instance Project must be in the Output of a Project or another Instance Project, even if that Project is a Ghost"},"Architecture_Dictionary/Objects/Parameters":{"id":"Architecture_Dictionary/Objects/Parameters","title":"Parameters","description":"Within Identity/, Parameters are an extendable location for storing data, in any format, that is being put forward as representing the Ghost (Identity or Output) of which it\u2019s a part. Parameters can be assessed by an EvidenceAlgo."},"Architecture_Dictionary/Objects/Person":{"id":"Architecture_Dictionary/Objects/Person","title":"Person","description":"Typeof Instance Project"},"Architecture_Dictionary/Objects/Prediction":{"id":"Architecture_Dictionary/Objects/Prediction","title":"Prediction","description":"typeof: Annotation"},"Architecture_Dictionary/Objects/Project":{"id":"Architecture_Dictionary/Objects/Project","title":"Project","description":"An Object that stores the history and current state of activity towards achieving a goal. This goal may be the production of an Output, or the collection together of a number of People into a team. All Projects consist of a description of the aims of the Project, a Governor and Governance. They may also optionally include Issues, Outputs and Milestones."},"Architecture_Dictionary/Objects/Projects":{"id":"Architecture_Dictionary/Objects/Projects","title":"Projects","description":"The location within a Project that allows the creation of other Projects or Instance Projects, and from which location they can be made Sovereign."},"Architecture_Dictionary/Objects/Pull Request Contract":{"id":"Architecture_Dictionary/Objects/Pull Request Contract","title":"Pull Request Contract","description":"Typeof: Contract"},"Architecture_Dictionary/Reference/Asset":{"id":"Architecture_Dictionary/Reference/Asset","title":"Asset","description":"Used to refer to non-Dreamcatcher things which exist or could exist in the real world. Examples include physical objects such as a mug, virtual assets such as digital files, patents, models of processes, models of states, access or use of services, and ideas."},"Architecture_Dictionary/Reference/Dreamcatcher Object Structure":{"id":"Architecture_Dictionary/Reference/Dreamcatcher Object Structure","title":"Dreamcatcher Object Structure","description":"The following is the top level structure of a Dreamcatcher Object. Dreamcatcher Objects can perform various roles (e.g. representing Ghosts, Users, Projects, Assets, Contracts and so forth.). As such, not all of these top level Objects need be populated with data. Likewise, populating some (e.g. Evidence) changes the utility of the Object."},"Architecture_Dictionary/Reference/Dreamcatcher Stack":{"id":"Architecture_Dictionary/Reference/Dreamcatcher Stack","title":"Dreamcatcher Stack","description":"The following is the stack on which Dreamcatcher is built. The lowest layers, as with ISO/OSI, are the more fundamental. Higher layers rely on layers below them."},"Architecture_Dictionary/Reference/Idea":{"id":"Architecture_Dictionary/Reference/Idea","title":"Idea","description":"The collective name for Issues, Wishes and Dreams. One of the taglines for the Dreamcatcher is \u201cOne blockchain for every Idea\u201d. This Object encapsulates the ideas in that phrase. The rest of the Dreamcatcher is about the refinement, deduplication, and progression of these ideas. These additional functions combined with the multiverse concept for ideas means that we have considerably more than one blockchain for every idea."},"Architecture_Dictionary/Reference/real":{"id":"Architecture_Dictionary/Reference/real","title":"real","description":"Real"},"Architecture_Dictionary/Selections/Attribution Table":{"id":"Architecture_Dictionary/Selections/Attribution Table","title":"Attribution Table","description":"Algorithmic output from applying the Attribution Algorithms to the Project data. Attribution Tables are recalculated based on Project events, or can be calculated as part of an external query. Result is a plain ledger list of beneficiary/amount."},"Architecture_Dictionary/Selections/Governance Table":{"id":"Architecture_Dictionary/Selections/Governance Table","title":"Governance Table","description":"Similar to an Attribution Table. It can be generated at any point in time to show the previous decisions made by Governance, and the outputs from the governanceAlgos."},"Architecture_Dictionary/Selections/Milestone":{"id":"Architecture_Dictionary/Selections/Milestone","title":"Milestone","description":"A collection of related Project Issues which a Project aims to complete by a certain time and/or certain cost. A Project can have any number of Milestones, including none. Milestones are the only Object that captures time, and order of issues. They can be used for forecasting purposes, roadmap generation, and revenue projections when used in conjunction with downstream Wishes."},"Dictionary_Conventions":{"id":"Dictionary_Conventions","title":"Dictionary Conventions","description":"1. Titles of Dictionaries are denoted in all-caps. E.g."},"DOS_Dictionary/Commands/add":{"id":"DOS_Dictionary/Commands/add","title":"add","description":"Executed within the folder of an Object, generates an instance based on the template of that Object. The instance is created as a sub-folder. Every blockchain has the ability to add a chain to itself. Add can be overridden by the context specific add for that place in the tree."},"DOS_Dictionary/Commands/cat":{"id":"DOS_Dictionary/Commands/cat","title":"cat","description":"For the specified Object, prints out to STDOUT the contents of the data currently held in that Object."},"DOS_Dictionary/Commands/cd":{"id":"DOS_Dictionary/Commands/cd","title":"cd","description":"Changes the directory that the user is currently in. Analogous to Posix cd."},"DOS_Dictionary/Commands/connect":{"id":"DOS_Dictionary/Commands/connect","title":"connect","description":"Mounts a symlink to a remote chainID, and makes it available in /home/connections. Once connected, the user can navigate to that location and run commands, permissions allowing."},"DOS_Dictionary/Commands/DOS Object":{"id":"DOS_Dictionary/Commands/DOS Object","title":"DOS Object","description":"A running instance, generated from a template, that contains the data and covenants necessary for its function. DOS Objects are akin to data structures generated from classes in OOP. C/f User Dictionary,Objects, which are types of DOS Objects."},"DOS_Dictionary/Commands/find":{"id":"DOS_Dictionary/Commands/find","title":"find","description":"Query, index, search and visibility of other Objects within the Chainspace."},"DOS_Dictionary/Commands/Install":{"id":"DOS_Dictionary/Commands/Install","title":"Install","description":"Instantiates an instance of an App bundle made available in the appStoreBrowser. Once instantiated, it is made available under apps/."},"DOS_Dictionary/Commands/ls":{"id":"DOS_Dictionary/Commands/ls","title":"ls","description":"For the current folder or the folder specified in a complete path, lists the instatiations of the Objects which have been added using the add command in that folder."},"DOS_Dictionary/Commands/publish":{"id":"DOS_Dictionary/Commands/publish","title":"publish","description":"Bundles a package for an App within the appStoreRegistry and makes it available to the appStoreBrowser, and optionally available to other appStoreBrowsers based on the publishing parameters."},"DOS_Dictionary/Commands/rm":{"id":"DOS_Dictionary/Commands/rm","title":"rm","description":"Orders a suicide of a chain."},"DOS_Dictionary/Commands/Subscribe":{"id":"DOS_Dictionary/Commands/Subscribe","title":"Subscribe","description":"A function that executes on a block being produced by another chain. The block triggers the event, but whether or not the function carries out any action is dependent on that function."},"DOS_Dictionary/Commands/Update":{"id":"DOS_Dictionary/Commands/Update","title":"Update","description":"A standard action that allows you to update the data in an Object, and reject the attempt if you try to do something outside of the schema."},"DOS_Dictionary/Commands/Workflow":{"id":"DOS_Dictionary/Commands/Workflow","title":"Workflow","description":"A watcher on a chain, which triggers when it changes and then carries out a series of steps itself, or triggers further actions in a remote chain by changing the prerequisite chain. A workflow either completes entirely, at every step, or does not complete at all."},"DOS_Dictionary/Events/Birthing":{"id":"DOS_Dictionary/Events/Birthing","title":"Birthing","description":"The process of moving a Project from within the hierarchy of a Sovereign Object to being a Sovereign Object in its own right. Before that move, the Sovereign Object in which the Project was embedded had complete control over that Project, including the ability to change any Covenant in the operation of the Dreamcatcher instance in which it was operating. After the move, the Project relies on the authoritative Dreamcatcher Covenants accessible in the Chainspace, which it can\u2019t alter."},"DOS_Dictionary/Events/Collection":{"id":"DOS_Dictionary/Events/Collection","title":"Collection","description":"A group of one or more Objects, dynamically created, which all share a predefined schema template or adhere to a Filter, and which reside within the hierarchy of their parent Object."},"DOS_Dictionary/Objects/child":{"id":"DOS_Dictionary/Objects/child","title":"child","description":"A data structure within an Object which can hold other Objects which relate within a hierarchical tree."},"DOS_Dictionary/Objects/Covenant":{"id":"DOS_Dictionary/Objects/Covenant","title":"Covenant","description":"A function that defines or can be run against an Object\u2019s data. There are two predefined covenants: datum and collection. There can be any number of custom covenants. Covenants may kick off work-flows or carry out work directly."},"DOS_Dictionary/Objects/Datum":{"id":"DOS_Dictionary/Objects/Datum","title":"Datum","description":"A sub-type of Covenant. A single Object which is created using the predefined schema template in the template."},"DOS_Dictionary/Objects/datumTemplate":{"id":"DOS_Dictionary/Objects/datumTemplate","title":"datumTemplate","description":"A Datum without any formData within it. When new datums are added to the collection that owns this datumTemplate, they must conform to the configuration contained within the datumTemplate to be allowed to be added to the collection. When the add() function of the collection is called, this datumTemplate is used to create the new Datum that has been requested."},"DOS_Dictionary/Objects/parent":{"id":"DOS_Dictionary/Objects/parent","title":"parent","description":"An Object which can hold other Objects which relate within a hierarchical tree is the Parent of those Objects."},"DOS_Dictionary/Objects/Sovereign  Object":{"id":"DOS_Dictionary/Objects/Sovereign  Object","title":"Sovereign  Object","description":"An Object which is addressable in the Chainspace and has no parent. Sovereign Objects pay Joules for the continued existence of themselves, and of all non self funded Objects within their hierarchy."},"DOS_Dictionary/Reference/chainID":{"id":"DOS_Dictionary/Reference/chainID","title":"chainID","description":"A unique identifier within the universal chainspace that denotes the location at which an Object can be found."},"DOS_Dictionary/Reference/Chainspace":{"id":"DOS_Dictionary/Reference/Chainspace","title":"Chainspace","description":"The totality of Sovereign Objects, and the method for their interaction."},"DOS_Dictionary/Reference/DOS Instance Structure":{"id":"DOS_Dictionary/Reference/DOS Instance Structure","title":"DOS Instance Structure","description":"Each DOS instance is related to one and only one user, although a user can have multiple instances."},"DOS_Dictionary/Reference/Properties":{"id":"DOS_Dictionary/Reference/Properties","title":"Properties","description":"Contained within an Object, Properties are fixed-configuration data structures which hold data specifically for the instance of the Object in which they are contained."},"DOS_Dictionary/Reference/Schema":{"id":"DOS_Dictionary/Reference/Schema","title":"Schema","description":"The schema is a formal structure described in an Object template which refers to the organization of data as a blueprint."},"DOS_Dictionary/Reference/Template":{"id":"DOS_Dictionary/Reference/Template","title":"Template","description":"The structure required to instantiate an instance of an Object. Each template is associated with a specific folder location, and is used as input to add."},"DOS_Dictionary/Reference/UISchema":{"id":"DOS_Dictionary/Reference/UISchema","title":"UISchema","description":"The UIschema is a formal structure described in an Object template which refers to the organization of the User Interface for that Object."},"DOS_Dictionary/Reference/Workflow":{"id":"DOS_Dictionary/Reference/Workflow","title":"Workflow","description":"A collection of functions that need to be carried out in order, which may call on resources or external services, and may call on external actors to carry out work on its behalf, and return the results to the next node in the workflow, or return the end result."},"DPL/Contract Example":{"id":"DPL/Contract Example","title":"Contract Example","description":"Mandatory Clauses"},"DPL/Core DPL":{"id":"DPL/Core DPL","title":"Core DPL","description":"Preface"},"DPL/Module Example":{"id":"DPL/Module Example","title":"Module Example","description":"Mutual Non-Disclosure Agreement"},"DPL/Modules":{"id":"DPL/Modules","title":"Modules","description":"Modules may be created by any User and offered to any other User to extend the Core DPL. They are intended to allow a low-friction way to add additional rights and responsibilities as part of a DCM Contract, but do not in any way supersede the Core DPL. Modules can only be referred to from a DCM Contract and do not have any force beyond that."},"DRAFTS/case-for-universal-object-layer":{"id":"DRAFTS/case-for-universal-object-layer","title":"The Universal Computing Surface","description":"Universal computing surface."},"DRAFTS/dreamcatcher-milestones":{"id":"DRAFTS/dreamcatcher-milestones","title":"dreamcatcher-milestones","description":"- burning / investing"},"DRAFTS/money-as-an-nft":{"id":"DRAFTS/money-as-an-nft","title":"money-as-an-nft","description":"Money + KYC + AML = NFT"},"DRAFTS/open-source-payments":{"id":"DRAFTS/open-source-payments","title":"open-source-payments","description":"How to earn sustainable revenue for all contrib"},"DRAFTS/README":{"id":"DRAFTS/README","title":"README","description":"Put anything not ready for publishing here, so we can at least get eyes on work in progress"},"DRAFTS/trends-in-virtualization":{"id":"DRAFTS/trends-in-virtualization","title":"trends-in-virtualization","description":"Show a steady progression towards smaller virtual machines"},"DRAFTS/tuning-types":{"id":"DRAFTS/tuning-types","title":"tuning-types","description":"There are four main types of tuning that are done on Interblock after every major change. These are listed in order of decreasing difficulty, and decreasing abstraction."},"Dreamcatcher Charter":{"id":"Dreamcatcher Charter","title":"Dreamcatcher Charter","description":"1. The Dreamcatcher exists to optimise innovation."},"Miscellaneous/doc1":{"id":"Miscellaneous/doc1","title":"Style Guide","description":"You can write content using GitHub-flavored Markdown syntax."},"Miscellaneous/mdx":{"id":"Miscellaneous/mdx","title":"Powered by MDX","description":"You can write JSX and use React components within your Markdown thanks to MDX."},"overview/overview":{"id":"overview/overview","title":"Overview","description":"Overview"},"References/Comparator":{"id":"References/Comparator","title":"Comparator","description":"Ideally we can construct some kind of comparison that helps us navigate the broad range of competitors in a standardized way, so that we can compactly share info with each other, and to newcomers."},"References/Comparisons/Jelurida":{"id":"References/Comparisons/Jelurida","title":"Jelurida","description":"https://www.jelurida.com/ardor"},"References/Comparisons/Kickstarter":{"id":"References/Comparisons/Kickstarter","title":"Kickstarter","description":"https://decrypt.co/87865/kickstarter-crypto-compete-daos"},"References/Comparisons/Polygen":{"id":"References/Comparisons/Polygen","title":"Polygen","description":"https://polygen.io/"},"spec/Specification":{"id":"spec/Specification","title":"Specification","description":"1. PURPOSE"},"Tweets":{"id":"Tweets","title":"Tweets","description":"This page is intended to be an ordered list of the headlines and tweets that best describe the Dreamcatcher. This list is in order, so PR to add your own one at the importance ranking you think it belongs. There may not be a single one, and the chosen one may be different depending on the audience. Format is:"},"User_Dictionary/Ambient Attribution":{"id":"User_Dictionary/Ambient Attribution","title":"Ambient Attribution","description":"Ambient Attribution arises from the interaction of Contribution, Attribution and Transparency, and depends heavily on Reputation."},"User_Dictionary/App":{"id":"User_Dictionary/App","title":"App","description":"An addition to the functionality of the Dreamcatcher that can be installed as required. Apps do not override the underlying functionality of the Dreamcatcher. For example they can provide Workflows, ProjectAlgos and Reputation, but cannot change Dreamcatcher functions such as Pull Requests."},"User_Dictionary/Arbiter":{"id":"User_Dictionary/Arbiter","title":"Arbiter","description":"A Signatory who has been appointed by two other Signatories to a DCM Contract to preside over an alleged breach."},"User_Dictionary/Arbitration":{"id":"User_Dictionary/Arbitration","title":"Arbitration","description":"A process carried out by an Arbiter to consider the evidence of a possible breach of any part of the License Stack, which puts the evidence gathered and the conclusion on-chain. Only an arbitrator can release any funds in-escrow, assets, changes to reputation based on the conclusion."},"User_Dictionary/Asset":{"id":"User_Dictionary/Asset","title":"Asset","description":"An attributable piece of work, typically a piece of code, material invention, method, a unique transformative combination of prior works, design, or art, or a bundle of services provided. Assets are tracked as Traces."},"User_Dictionary/Attribution":{"id":"User_Dictionary/Attribution","title":"Attribution","description":"The disbursement event of any benefit by the use or sale of an Asset to Users who can prove Contribution."},"User_Dictionary/Automatic Capital":{"id":"User_Dictionary/Automatic Capital","title":"Automatic Capital","description":"Automatic capital is the process by which investment type activities can occur, but those activities are software controlled to ensure no investment contract lass promises can be made between any members."},"User_Dictionary/Branch":{"id":"User_Dictionary/Branch","title":"Branch","description":"typeof: Object"},"User_Dictionary/Citation":{"id":"User_Dictionary/Citation","title":"Citation","description":"Typeof: Dependency"},"User_Dictionary/CombinerAlgo":{"id":"User_Dictionary/CombinerAlgo","title":"CombinerAlgo","description":"CombinerAlgos allow for nesting and weighting of GovernanceAlgos. They contain logic about the order in which to run the embedded GovernanceAlgos, the data to pass to them, and how to weight the results."},"User_Dictionary/Comment":{"id":"User_Dictionary/Comment","title":"Comment","description":"Typeof: Annotation"},"User_Dictionary/Consumer":{"id":"User_Dictionary/Consumer","title":"Consumer","description":"Typeof: Person"},"User_Dictionary/Contribution":{"id":"User_Dictionary/Contribution","title":"Contribution","description":"The record of a piece of work or effort being expended and recorded on-chain. Contributions are recorded as State Changes."},"User_Dictionary/Contributor":{"id":"User_Dictionary/Contributor","title":"Contributor","description":"A Person or Project who has made any submissions to the Project, being metadata changes, issues, or direct contributions to the Output of the Project is working on and has submitted work to resolve an Issue."},"User_Dictionary/Coordinator":{"id":"User_Dictionary/Coordinator","title":"Coordinator","description":"The fundamental Object Constructor in the DCM which is used as an operational template for all other Objects. Projects, Ghosts, Traces, Users are all built using the Coordinator Template."},"User_Dictionary/DCM":{"id":"User_Dictionary/DCM","title":"DCM","description":"(Short for \u201cDreamcatcher Machine\u201d) The system provided by the sum of all Dreamcatcher instances which interact through the Dreamcatcher Protocol."},"User_Dictionary/DCM Contract":{"id":"User_Dictionary/DCM Contract","title":"DCM Contract","description":"An offer and acceptance, detailed on-chain, between two Users that details a transaction (e.g. work to be carried out, services to be rendered or assets to be transferred) DCM Contracts can only act as a supplemental declaration to the core DLP and cannot supersede any clause(s) contained within the Core DPL or amend the core DPL in part or whole."},"User_Dictionary/Deep Fork":{"id":"User_Dictionary/Deep Fork","title":"Deep Fork","description":"A Fork that, regardless of the depth of the Object being Forked, includes every Child of the hierarchy of the Project in which that Object is included. This is much more expensive in Joules."},"User_Dictionary/Demand":{"id":"User_Dictionary/Demand","title":"Demand","description":"Demand is the general name for running different Selectors on the data held within a single Project and with all linked Projects. It\u2019s aim is to summarize:"},"User_Dictionary/Dream":{"id":"User_Dictionary/Dream","title":"Dream","description":"Typeof: Object"},"User_Dictionary/Fork":{"id":"User_Dictionary/Fork","title":"Fork","description":"Typeof: workflow"},"User_Dictionary/Frame":{"id":"User_Dictionary/Frame","title":"Frame","description":"Typeof: combinerAlgo"},"User_Dictionary/GovernanceAlgo":{"id":"User_Dictionary/GovernanceAlgo","title":"GovernanceAlgo","description":"Typeof: App"},"User_Dictionary/Governor":{"id":"User_Dictionary/Governor","title":"Governor","description":"Typeof: Person or Project"},"User_Dictionary/History":{"id":"User_Dictionary/History","title":"History","description":"The on-chain data that immutably records the events of all Objects."},"User_Dictionary/Inbox":{"id":"User_Dictionary/Inbox","title":"Inbox","description":"Typeof: Object"},"User_Dictionary/Investor":{"id":"User_Dictionary/Investor","title":"Investor","description":"A Person or Project who contributes funds directly to a Project. This contribution may carry conditions, e.g. being triggered only when the Project reaches certain Milestones."},"User_Dictionary/LDE":{"id":"User_Dictionary/LDE","title":"LDE","description":"An LDE is any person or legal entity that can do the things a human person is usually able to do in Contract Law \u2013 such as enter into contracts, sue and be sued, own property, and so on. (The reason for the term \\"LDE\\" is that some legal persons are not people: companies and corporations are \\"persons\u2026)"},"User_Dictionary/Link Tabs":{"id":"User_Dictionary/Link Tabs","title":"Link Tabs","description":""},"User_Dictionary/MeasurementAlgos":{"id":"User_Dictionary/MeasurementAlgos","title":"MeasurementAlgos","description":"Typeof: App"},"User_Dictionary/Merge":{"id":"User_Dictionary/Merge","title":"Merge","description":"Typeof: Workflow"},"User_Dictionary/Messaging":{"id":"User_Dictionary/Messaging","title":"Messaging","description":"Typeof: Object"},"User_Dictionary/NFA":{"id":"User_Dictionary/NFA","title":"NFA","description":"Typeof: Coordinator"},"User_Dictionary/Object":{"id":"User_Dictionary/Object","title":"Object","description":"A uniquely identifiable chain within the DOS which contains data, an immutable history of how that data has changed over time and how it has interacted with other Objects and a Ghost with permissions to control Access Permissions (the Owner)."},"User_Dictionary/Origin":{"id":"User_Dictionary/Origin","title":"Origin","description":"Typeof: Object"},"User_Dictionary/OutBox":{"id":"User_Dictionary/OutBox","title":"OutBox","description":"Typeof: Object"},"User_Dictionary/Pool":{"id":"User_Dictionary/Pool","title":"Pool","description":"A Pool is a collection of Requests, Ideas, and NVN currency that all meet some entrance criteria."},"User_Dictionary/Project Creation":{"id":"User_Dictionary/Project Creation","title":"Project Creation","description":"The act of creating a new Project within the DCM."},"User_Dictionary/ProjectAlgo":{"id":"User_Dictionary/ProjectAlgo","title":"ProjectAlgo","description":"Typeof: App"},"User_Dictionary/Proposer":{"id":"User_Dictionary/Proposer","title":"Proposer","description":"The entity that authors a Pull Request for the consideration by a Project\u2019s Governance."},"User_Dictionary/Reputation Ledger":{"id":"User_Dictionary/Reputation Ledger","title":"Reputation Ledger","description":"The immutable record of the results of a User\u2019s actions on the DCM. This includes the decisions of Artbiters that concern that User, the comments of other Users about that User and meta-data on the fact that a transaction or interaction has occurred between Users (noting that the details of the transaction or interaction may still be obfuscated.)"},"User_Dictionary/ReputationAlgos":{"id":"User_Dictionary/ReputationAlgos","title":"ReputationAlgos","description":"Typeof: App"},"User_Dictionary/Selector":{"id":"User_Dictionary/Selector","title":"Selector","description":""},"User_Dictionary/Shallow Fork":{"id":"User_Dictionary/Shallow Fork","title":"Shallow Fork","description":"The default Fork in Interblock. For any given Object that is to be Forked, every Object in the path up to the containing Project is Forked with it. Any other Object which is not in that direct path maintains its reference to the original object."},"User_Dictionary/State Change":{"id":"User_Dictionary/State Change","title":"State Change","description":"The indivisible unit of utility, a State Change occurs within the DCM any time a Block is created, expending at least one Joule."},"User_Dictionary/symLink":{"id":"User_Dictionary/symLink","title":"symLink","description":"Two way authenticated connection between two chains, permanent until killed. Non-parent child link to another chain. Each can send actions, read data depending on your permission. Equivalent to a tcp connection."},"User_Dictionary/Target":{"id":"User_Dictionary/Target","title":"Target","description":"The Target is the Object that would be changed following a Pull Request for a Merge. The Governance which controls the Target is the authority against which a Pull Request is raised and which therefore has the authority to deny that Pull Request. NB, the Origin may also change. However, as the Origin instigates the Pull Request, consent from its Governance is already given."},"User_Dictionary/Terminus Fork, Terminus Merge":{"id":"User_Dictionary/Terminus Fork, Terminus Merge","title":"Terminus Fork, Terminus Merge","description":"When a Origin is in agreement it can be killed after that Fork or Merge is successful. This is achieved by the Object being terminated freezing, followed by the Pull Request for the Fork or Merge."},"User_Dictionary/Trace Minting Process":{"id":"User_Dictionary/Trace Minting Process","title":"Trace Minting Process","description":"In order for Contributions (ie State Changes) to be combined into a Trace, there is a \u2018minting process\u2019. That process wraps one or more State Changes together into a Trace, and tokenises them. This allows that bundle to subsequently be sold (transfer of Governance), or rights be sold (alteration to Attribution) as a bundle."},"User_Dictionary/Transactional Voting":{"id":"User_Dictionary/Transactional Voting","title":"Transactional Voting","description":"In the dreamcatcher model every transaction has a field for reference to a hash of a pull request, so for every value exchange a vote can be cast about a desired state change of anything at all, since anything that is modeled using chains can be pull requested against. How systems choose to respond to those vote signals is up to the implementors, but pure dreamcatcher projects will faithfully follow those votes directly based on some yet to be determined algorithm. This means that any time any given state change occurs, it is capable of signaling that it would like some other state change to occur."},"User_Dictionary/User":{"id":"User_Dictionary/User","title":"User","description":"An LDE (Legal Dreamcatcher Entity) who interacts with the DCM. See \u201cNotes, Evidence Stack\u201d. Signatories form a subset of Users."},"User_Dictionary/User_Dictionary":{"id":"User_Dictionary/User_Dictionary","title":"User Dictionary","description":"Guidance on User Dictionary to go here."},"User_Dictionary/Weak Link":{"id":"User_Dictionary/Weak Link","title":"Weak Link","description":"(stub)"},"User_Dictionary/Wish":{"id":"User_Dictionary/Wish","title":"Wish","description":"typeof: Object"},"wp_appstore":{"id":"wp_appstore","title":"The App Store Whitepaper","description":"Goal"},"wp_dos":{"id":"wp_dos","title":"The DOS Whitepaper","description":"Goal","sidebar":"tech"},"wp_dreamcatcher":{"id":"wp_dreamcatcher","title":"The Dreamcatcher Whitepaper","description":"Goal","sidebar":"tech"},"wp_interblock":{"id":"wp_interblock","title":"The Interblock Whitepaper","description":"Goal","sidebar":"tech"},"wp_inversion":{"id":"wp_inversion","title":"The Inversion Currency Whitepaper","description":"Goal","sidebar":"tech"}}}')}}]);