"use strict";(self.webpackChunk_dreamcatcher_tech_dreamcatcher_website=self.webpackChunk_dreamcatcher_tech_dreamcatcher_website||[]).push([[80645],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,d=p["".concat(c,".").concat(m)]||p[m]||h[m]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1424:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return h}});var r=n(83117),a=n(80102),o=(n(67294),n(3905)),i=["components"],s={},c=void 0,l={unversionedId:"User_Dictionary/Transactional Voting",id:"User_Dictionary/Transactional Voting",title:"Transactional Voting",description:"In the dreamcatcher model every transaction has a field for reference to a hash of a pull request, so for every value exchange a vote can be cast about a desired state change of anything at all, since anything that is modeled using chains can be pull requested against. How systems choose to respond to those vote signals is up to the implementors, but pure dreamcatcher projects will faithfully follow those votes directly based on some yet to be determined algorithm. This means that any time any given state change occurs, it is capable of signaling that it would like some other state change to occur.",source:"@site/interblock/User_Dictionary/Transactional Voting.md",sourceDirName:"User_Dictionary",slug:"/User_Dictionary/Transactional Voting",permalink:"/interblock/User_Dictionary/Transactional Voting",draft:!1,editUrl:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/edit/master/website/interblock/User_Dictionary/Transactional Voting.md",tags:[],version:"current",frontMatter:{}},u={},h=[],p={toc:h};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In the dreamcatcher model every transaction has a field for reference to a hash of a pull request, so for every value exchange a vote can be cast about a desired state change of anything at all, since anything that is modeled using chains can be pull requested against. How systems choose to respond to those vote signals is up to the implementors, but pure dreamcatcher projects will faithfully follow those votes directly based on some yet to be determined algorithm. This means that any time any given state change occurs, it is capable of signaling that it would like some other state change to occur."),(0,o.kt)("p",null,"Essential to the self correcting nature of Ambient Attribution is that anyone must be able to vote on anything at any time, with any type of weighting that they choose. This is the only way that supply chains can be corrected and made to function fairly end to end. The purest form of correction is the voting on algorithms and parameters that calculate what attribution should be, rather than direct assertions. Fairness seems to demand that all projects should be subjected to the same algorithm, too, and so it might be that the ultimate attribution algorithm is a large sampling based solution, rather than an actual formula."),(0,o.kt)("p",null,"Dreamcatcher projects in native mode disperse a percentage of each revenue transaction to the stack of dependencies that created the project. This percentage cannot be set by any person, as we promote algorithmic dispersals, not assertion based dispersals. Transactional Voting provides the method by which this percentage, or the algorithm that calculates this percentage is ultimately set. The algorithm can never be particular to any given project, and acts as a sort of global appraisal system, as no interested party can ever be given the power to set some parameter that could advantage them."))}m.isMDXComponent=!0}}]);